package filter

import (
	"slices"
	"strconv"
	"unicode"
)

// DenyStr 阻止denyValues中的值
func (strType *StringType) DenyStr(denyValues []string, customError ...string) *StringType {
	if strType.err != nil || strType.currentValue == "" {
		return strType
	}
	for k := range denyValues {
		if denyValues[k] == strType.currentValue {
			strType.err = wrapError(strType.name, InvalidErrorText, customError...)
			return strType
		}
	}
	return strType
}

// DenyOtherSymbol 阻止allowValues之外的符号
func (strType *StringType) DenyOtherSymbol(allowValues []rune, customError ...string) *StringType {
	if strType.err != nil || strType.currentValue == "" {
		return strType
	}
	for _, r := range strType.currentValue {
		// 如果是标点符号
		if unicode.IsPunct(r) {
			if !slices.Contains(allowValues, r) {
				strType.err = wrapError(strType.name, InvalidErrorText, customError...)
				return strType
			}
		}
	}
	return strType
}

// DenyInt 阻止denyValues中的值
func (strType *StringType) DenyInt(denyValues []int, customError ...string) *StringType {
	if strType.err != nil || strType.currentValue == "" {
		return strType
	}
	value, err := strconv.Atoi(strType.currentValue)
	if err != nil {
		strType.err = wrapError(strType.name, InvalidErrorText, customError...)
		return strType
	}
	for k := range denyValues {
		if value == denyValues[k] {
			strType.err = wrapError(strType.name, InvalidErrorText, customError...)
			return strType
		}
	}
	return strType
}

// DenyInt8 阻止denyValues中的值
func (strType *StringType) DenyInt8(denyValues []int8, customError ...string) *StringType {
	if strType.err != nil || strType.currentValue == "" {
		return strType
	}
	value64, err := strconv.ParseInt(strType.currentValue, 10, 8)
	if err != nil {
		strType.err = wrapError(strType.name, InvalidErrorText, customError...)
		return strType
	}
	value := int8(value64)
	for k := range denyValues {
		if value == denyValues[k] {
			strType.err = wrapError(strType.name, InvalidErrorText, customError...)
			return strType
		}
	}
	return strType
}

// DenyInt16 阻止denyValues中的值
func (strType *StringType) DenyInt16(denyValues []int16, customError ...string) *StringType {
	if strType.err != nil || strType.currentValue == "" {
		return strType
	}
	value64, err := strconv.ParseInt(strType.currentValue, 10, 16)
	if err != nil {
		strType.err = wrapError(strType.name, InvalidErrorText, customError...)
		return strType
	}
	value := int16(value64)
	for k := range denyValues {
		if value == denyValues[k] {
			strType.err = wrapError(strType.name, InvalidErrorText, customError...)
			return strType
		}
	}
	return strType
}

// DenyInt32 阻止denyValues中的值
func (strType *StringType) DenyInt32(denyValues []int32, customError ...string) *StringType {
	if strType.err != nil || strType.currentValue == "" {
		return strType
	}
	value64, err := strconv.ParseInt(strType.currentValue, 10, 32)
	if err != nil {
		strType.err = wrapError(strType.name, InvalidErrorText, customError...)
		return strType
	}
	value := int32(value64)
	for k := range denyValues {
		if value == denyValues[k] {
			strType.err = wrapError(strType.name, InvalidErrorText, customError...)
			return strType
		}
	}
	return strType
}

// DenyInt64 阻止denyValues中的值
func (strType *StringType) DenyInt64(denyValues []int64, customError ...string) *StringType {
	if strType.err != nil || strType.currentValue == "" {
		return strType
	}
	value64, err := strconv.ParseInt(strType.currentValue, 10, 64)
	if err != nil {
		strType.err = wrapError(strType.name, InvalidErrorText, customError...)
		return strType
	}
	for k := range denyValues {
		if value64 == denyValues[k] {
			strType.err = wrapError(strType.name, InvalidErrorText, customError...)
			return strType
		}
	}
	return strType
}

// DenyFloat32 阻止denyValues中的值
func (strType *StringType) DenyFloat32(denyValues []float32, customError ...string) *StringType {
	if strType.err != nil || strType.currentValue == "" {
		return strType
	}
	value, err := strconv.ParseFloat(strType.currentValue, 32)
	if err != nil {
		strType.err = wrapError(strType.name, InvalidErrorText, customError...)
		return strType
	}
	value32 := float32(value)
	for k := range denyValues {
		if value32 == denyValues[k] {
			strType.err = wrapError(strType.name, InvalidErrorText, customError...)
			return strType
		}
	}
	return strType
}

// DenyFloats64 阻止denyValues中的值
func (strType *StringType) DenyFloat64(denyValues []float64, customError ...string) *StringType {
	if strType.err != nil || strType.currentValue == "" {
		return strType
	}
	value64, err := strconv.ParseFloat(strType.currentValue, 64)
	if err != nil {
		strType.err = wrapError(strType.name, InvalidErrorText, customError...)
		return strType
	}
	for k := range denyValues {
		if value64 == denyValues[k] {
			strType.err = wrapError(strType.name, InvalidErrorText, customError...)
			return strType
		}
	}
	return strType
}
