package filter

import (
	"encoding/base64"
	"html"
	"net/url"
)

// base64 std编码
func (strType *StringType) Base64StdEncode() *StringType {
	if strType.err != nil || strType.currentValue == "" {
		return strType
	}
	strType.currentValue = base64.StdEncoding.EncodeToString(strToBytes(strType.currentValue))
	return strType
}

// base64 std解码
func (strType *StringType) Base64StdDecode(customError ...string) *StringType {
	if strType.err != nil || strType.currentValue == "" {
		return strType
	}
	bytes, err := base64.StdEncoding.DecodeString(strType.currentValue)
	if err != nil {
		strType.err = wrapError(strType.name, InvalidErrorText, customError...)
		return strType
	}
	strType.currentValue = bytesToStr(bytes)
	return strType
}

// base64 RawStd编码
func (strType *StringType) Base64RawStdEncode() *StringType {
	if strType.err != nil || strType.currentValue == "" {
		return strType
	}
	strType.currentValue = base64.RawStdEncoding.EncodeToString(strToBytes(strType.currentValue))
	return strType
}

// base64 RawStd解码
func (strType *StringType) Base64RawStdDecode(customError ...string) *StringType {
	if strType.err != nil || strType.currentValue == "" {
		return strType
	}
	bytes, err := base64.RawStdEncoding.DecodeString(strType.currentValue)
	if err != nil {
		strType.err = wrapError(strType.name, InvalidErrorText, customError...)
		return strType
	}
	strType.currentValue = bytesToStr(bytes)
	return strType
}

// base64 URL编码
func (strType *StringType) Base64URLEncode() *StringType {
	if strType.err != nil || strType.currentValue == "" {
		return strType
	}
	strType.currentValue = base64.URLEncoding.EncodeToString(strToBytes(strType.currentValue))
	return strType
}

// base64 URL解码
func (strType *StringType) Base64URLDecode(customError ...string) *StringType {
	if strType.err != nil || strType.currentValue == "" {
		return strType
	}
	bytes, err := base64.URLEncoding.DecodeString(strType.currentValue)
	if err != nil {
		strType.err = wrapError(strType.name, InvalidErrorText, customError...)
		return strType
	}
	strType.currentValue = bytesToStr(bytes)
	return strType
}

// base64 RawURL编码
func (strType *StringType) Base64RawURLEncode() *StringType {
	if strType.err != nil || strType.currentValue == "" {
		return strType
	}
	strType.currentValue = base64.RawURLEncoding.EncodeToString(strToBytes(strType.currentValue))
	return strType
}

// base64 RawURL解码
func (strType *StringType) Base64RawURLDecode(customError ...string) *StringType {
	if strType.err != nil || strType.currentValue == "" {
		return strType
	}
	bytes, err := base64.RawURLEncoding.DecodeString(strType.currentValue)
	if err != nil {
		strType.err = wrapError(strType.name, InvalidErrorText, customError...)
		return strType
	}
	strType.currentValue = bytesToStr(bytes)
	return strType
}

// html.UnescapeString
func (strType *StringType) HTMLUnescape() *StringType {
	if strType.err != nil || strType.currentValue == "" {
		return strType
	}
	strType.currentValue = html.UnescapeString(strType.currentValue)
	return strType
}

// html.EscapeString
func (strType *StringType) HTMLEscape() *StringType {
	if strType.err != nil || strType.currentValue == "" {
		return strType
	}
	strType.currentValue = html.EscapeString(strType.currentValue)
	return strType
}

// url.PathUnescape
func (strType *StringType) URLPathUnescape(customError ...string) *StringType {
	if strType.err != nil || strType.currentValue == "" {
		return strType
	}
	value, err := url.PathUnescape(strType.currentValue)
	if err != nil {
		strType.err = wrapError(strType.name, InvalidErrorText, customError...)
		return strType
	}
	strType.currentValue = value
	return strType
}

// 与url.PathEscape相同
func (strType *StringType) URLPathEscape() *StringType {
	if strType.err != nil || strType.currentValue == "" {
		return strType
	}
	strType.currentValue = url.PathEscape(strType.currentValue)
	return strType
}

// 与url.QueryUnescape相同
func (strType *StringType) URLQueryUnescape(customError ...string) *StringType {
	if strType.err != nil || strType.currentValue == "" {
		return strType
	}
	value, err := url.QueryUnescape(strType.currentValue)
	if err != nil {
		strType.err = wrapError(strType.name, InvalidErrorText, customError...)
		return strType
	}
	strType.currentValue = value
	return strType
}

// URLQueryEscape 与url.QueryEscape相同
func (strType *StringType) URLQueryEscape() *StringType {
	if strType.err != nil || strType.currentValue == "" {
		return strType
	}
	strType.currentValue = url.QueryEscape(strType.currentValue)
	return strType
}
