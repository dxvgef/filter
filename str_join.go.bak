package filter

import "strings"

// 拼接string
func (strType *StringType) JoinStr(values ...string) *StringType {
	if strType.err != nil {
		return strType
	}
	var value strings.Builder
	value.WriteString(strType.currentValue)
	for k := range values {
		value.WriteString(values[k])
	}
	strType.currentValue = value.String()
	return strType
}

// JoinBytes 拼接bytes
func (strType *StringType) JoinBytes(values ...[]byte) *StringType {
	if strType.err != nil {
		return strType
	}
	var value strings.Builder
	value.WriteString(strType.currentValue)
	for k := range values {
		value.Write(values[k])
	}
	strType.currentValue = value.String()
	return strType
}

// JoinByte 拼接byte
func (strType *StringType) JoinByte(values ...byte) *StringType {
	if strType.err != nil {
		return strType
	}
	var value strings.Builder
	value.WriteString(strType.currentValue)
	for k := range values {
		value.WriteByte(values[k])
	}
	strType.currentValue = value.String()
	return strType
}

// JoinRune 拼接rune
func (strType *StringType) JoinRune(values ...rune) *StringType {
	if strType.err != nil {
		return strType
	}
	var value strings.Builder
	value.WriteString(strType.currentValue)
	for k := range values {
		value.WriteRune(values[k])
	}
	strType.currentValue = value.String()
	return strType
}
