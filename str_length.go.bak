package filter

import (
	"unicode/utf8"
)

// MatchLength 匹配长度
func (strType *StringType) MatchLength(value int, customError ...string) *StringType {
	if strType.err != nil || strType.currentValue == "" {
		return strType
	}
	if len(strType.currentValue) != value {
		strType.err = wrapError(strType.name, InvalidErrorText, customError...)
	}
	return strType
}

// MinLength 最小长度
func (strType *StringType) MinLength(min int, customError ...string) *StringType {
	if strType.err != nil || strType.currentValue == "" {
		return strType
	}
	if len(strType.currentValue) < min {
		strType.err = wrapError(strType.name, InvalidErrorText, customError...)
	}
	return strType
}

// MinUTF8Length UTF8编码最小长度
func (strType *StringType) MinUTF8Length(min int, customError ...string) *StringType {
	if strType.err != nil || strType.currentValue == "" {
		return strType
	}
	if utf8.RuneCountInString(strType.currentValue) < min {
		strType.err = wrapError(strType.name, InvalidErrorText, customError...)
	}
	return strType
}

// MaxLength 最大长度
func (strType *StringType) MaxLength(max int, customError ...string) *StringType {
	if strType.err != nil || strType.currentValue == "" {
		return strType
	}
	if len(strType.currentValue) > max {
		strType.err = wrapError(strType.name, InvalidErrorText, customError...)
	}
	return strType
}

// MaxUTF8Length UTF8编码最大长度
func (strType *StringType) MaxUTF8Length(max int, customError ...string) *StringType {
	if strType.err != nil || strType.currentValue == "" {
		return strType
	}
	if utf8.RuneCountInString(strType.currentValue) > max {
		strType.err = wrapError(strType.name, InvalidErrorText, customError...)
	}
	return strType
}
