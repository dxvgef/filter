package filter

import "strconv"

// MinInteger 最小整数值
func (strType *StringType) MinInteger(min int64, customError ...string) *StringType {
	if strType.err != nil || strType.currentValue == "" {
		return strType
	}
	value64, err := strconv.ParseInt(strType.currentValue, 10, 64)
	if err != nil {
		strType.err = wrapError(strType.name, InvalidErrorText, customError...)
		return strType
	}
	if value64 < min {
		strType.err = wrapError(strType.name, InvalidErrorText, customError...)
	}
	return strType
}

// MaxInteger 最大整数值
func (strType *StringType) MaxInteger(max int64, customError ...string) *StringType {
	if strType.err != nil || strType.currentValue == "" {
		return strType
	}
	value64, err := strconv.ParseInt(strType.currentValue, 10, 64)
	if err != nil {
		strType.err = wrapError(strType.name, InvalidErrorText, customError...)
		return strType
	}
	if value64 > max {
		strType.err = wrapError(strType.name, InvalidErrorText, customError...)
	}
	return strType
}

// MinFloat 最小浮点值
func (strType *StringType) MinFloat(min float64, customError ...string) *StringType {
	if strType.err != nil || strType.currentValue == "" {
		return strType
	}
	value64, err := strconv.ParseFloat(strType.currentValue, 64)
	if err != nil {
		strType.err = wrapError(strType.name, InvalidErrorText, customError...)
		return strType
	}

	if value64 < min {
		strType.err = wrapError(strType.name, InvalidErrorText, customError...)
	}
	return strType
}

// MaxFloat 最大浮点值
func (strType *StringType) MaxFloat(max float64, customError ...string) *StringType {
	if strType.err != nil || strType.currentValue == "" {
		return strType
	}
	value64, err := strconv.ParseFloat(strType.currentValue, 64)
	if err != nil {
		strType.err = wrapError(strType.name, InvalidErrorText, customError...)
		return strType
	}
	if value64 > max {
		strType.err = wrapError(strType.name, InvalidErrorText, customError...)
	}
	return strType
}
